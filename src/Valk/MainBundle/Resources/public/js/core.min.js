"use strict";
var App = {initialize: function () {
    var a = $('a[rel="javascript"]');
    if (a.length) {
        a.removeAttr("onclick").removeAttr("onmouseover").removeAttr("title").css("cursor", "pointer");
    }
    var e = $("#support-link"), d = $("#explore-link"), c = $("#breaking-link"), b = $("#auth-link");
    if (e.length > 0) {
        e.unbind().click(function () {
            Tickets.loadStatus();
            Toggle.open(this, "active", "#support-menu");
            return false;
        });
    }
    if (b.length > 0) {
        b.unbind().click(function () {
            Toggle.open(this, "active", "#auth-menu");
            return false;
        });
        $("#auth-menu a").click(function () {
            var f;
            if (this.className === "auth-close") {
                Toggle.open(b, "active", "#auth-menu");
                b.parent().hide();
                f = "Close";
            } else {
                if (this.className === "auth-button") {
                    f = "Add";
                } else {
                    f = "More";
                }
            }
            Cookie.create("serviceBar.authCheck", 1, {expires: 744, path: "/"});
        });
    }
    if (d.length > 0) {
        d.unbind().click(function () {
            Toggle.open(this, "active", "#explore-menu");
            return false;
        });
    }
    if (c.length > 0) {
        c.unbind().click(function () {
            App.breakingNews();
            return false;
        });
    }
}, closeWarning: function (b, a) {
    $(b).hide();
    if (a) {
        App.saveCookie(a);
    }
}, breakingNews: function (c) {
    var b = $("#breaking-news");
    var a = $("#announcement-warning");
    if (a.is(":visible")) {
        a.hide();
        b.removeClass("opened");
    } else {
        a.show();
        b.addClass("opened");
    }
    if (c) {
        Cookie.create("serviceBar.breakingNews", c);
    }
}, saveCookie: function (a) {
    Cookie.create("serviceBar." + a, 1, {expires: 8760, path: "/"});
}, resetCookie: function (a) {
    Cookie.create("serviceBar." + a, 0, {expires: 8760, path: "/"});
}, serviceBar: function () {
    var b = Cookie.read("serviceBar.browserWarning");
    var a = Cookie.read("serviceBar.localeWarning");
    if (b === 1) {
        $("#browser-warning").hide();
    }
    if (a === 1) {
        $("#i18n-warning").hide();
    }
}, totalModules: 0, totalLoaded: 0, modules: [], forceLoad: true, sidebar: function (a) {
    App.totalModules = a.length;
    if (a.length) {
        for (var b = 0; b <= (a.length - 1); ++b) {
            App.loadModule(a[b], b);
        }
    }
    window.setTimeout(function () {
        if (App.forceLoad) {
            App.showSidebar();
        }
    }, 5000);
}, showSidebar: function () {
    App.forceLoad = false;
    var a = $("#dynamic-sidebar-target");
    var c = $("#sidebar .sidebar-bot");
    for (var b = 0; b < App.totalModules; b++) {
        if (App.modules[b]) {
            App.modules[b].appendTo(a);
        }
    }
    $("#sidebar-loading").fadeOut("normal", function () {
        c.find(".sidebar-module").fadeIn();
        $(this).remove();
    });
    App.modules = [];
    App.totalModules = 0;
    App.totalLoaded = 0;
}, loadModule: function (c, b) {
    var a = $("#dynamic-sidebar-target");
    $.ajax({url: Core.baseUrl + "/sidebar/" + c.type + (c.query || ""), type: "GET", dataType: "html", cache: true, global: false, success: function (e) {
        App.totalLoaded++;
        if ($.trim(e) !== "") {
            var d = $(e);
            if (App.forceLoad) {
                d.hide();
                App.modules[b] = d;
            } else {
                d.appendTo(a);
            }
        }
    }, error: function () {
        App.totalLoaded++;
    }, complete: function () {
        if (App.totalLoaded >= App.totalModules) {
            window.setTimeout(App.showSidebar, 100);
        }
    }});
}};
$(function () {
    App.initialize();
});
var Blackout = {initialized: false, element: null, shim: null, initialize: function () {
    Blackout.element = $("<div/>", {id: "blackout"});
    Blackout.element.on("click", Core.stopPropagation).on("keyup", Blackout.listen);
    $("body").append(Blackout.element);
    if (Core.browser.full === "ie6") {
        Blackout.element.css("backgroundColor", "#000");
        Blackout.element.css("filter", "alpha(opacity=70)");
        Blackout.shim = $("<iframe />", {src: "javascript:false;", frameborder: 0, scrolling: "no"}).addClass("support-shim");
        Blackout.element.append(Blackout.shim);
    }
    Blackout.initialized = true;
}, listen: function (a) {
    if (a.which === KeyCode.esc) {
        Blackout.hide();
    }
}, show: function (c, b, a) {
    if (!Blackout.initialized) {
        Blackout.initialize();
    }
    if (Core.isIE()) {
        Blackout.element.css("width", Page.dimensions.width).css("height", $(document).height());
        if (Core.browser.full === "ie6") {
            Blackout.shim.css("width", Blackout.element.css("width")).css("height", Blackout.element.css("height"));
            if (Core.isCallback(b)) {
                Blackout.shim[0].contentWindow.document.onclick = b;
            }
        }
    }
    if (a) {
        Blackout.element.addClass("blackout-transparent");
    }
    Blackout.element.show();
    if (Core.isCallback(c)) {
        c();
    }
    if (Core.isCallback(b)) {
        Blackout.element.click(b);
    }
}, hide: function (a) {
    Blackout.element.hide();
    if (Core.isCallback(a)) {
        a();
    }
    Blackout.element.unbind("click").removeClass("blackout-transparent");
}};
if (!Object.create) {
    Object.create = function (b) {
        if (arguments.length > 1) {
            throw new Error("Object.create implementation only accepts the first parameter.");
        }
        function a() {
        }

        a.prototype = b;
        return new a();
    };
}
if (!Object.getPrototypeOf) {
    if (typeof"test".__proto__ === "object") {
        Object.getPrototypeOf = function (a) {
            return a.__proto__;
        };
    } else {
        Object.getPrototypeOf = function (a) {
            return a.constructor.prototype;
        };
    }
}
if (!String.fromCodePoint) {
    /*!
     * ES6 Unicode Shims 0.1
     * (c) 2012 Steven Levithan <http://slevithan.com/>
     * MIT License
     */
    String.fromCodePoint = function fromCodePoint() {
        var d = [], a, e, b, c;
        for (c = 0; c < arguments.length; ++c) {
            a = arguments[c];
            e = a - 65536;
            b = a > 65535 ? [55296 + (e >> 10), 56320 + (e & 1023)] : [a];
            d.push(String.fromCharCode.apply(null, b));
        }
        return d.join("");
    };
}
if (!String.prototype.trim) {
    String.prototype.trim = function () {
        return $.trim(this);
    };
}
if (!String.prototype.capitalize) {
    String.prototype.capitalize = function () {
        return this.charAt(0).toUpperCase() + this.slice(1);
    };
}
jQuery.expr[":"].caseInsensitiveContains = typeof(jQuery.expr.createPseudo) == "function" ? jQuery.expr.createPseudo(function (a) {
    return function (b) {
        return jQuery(b).text().toLocaleLowerCase().indexOf(a.toLocaleLowerCase()) >= 0;
    };
}) : function (c, b, a) {
    return jQuery(c).text().toLocaleLowerCase().indexOf(a[3].toLocaleLowerCase()) >= 0;
};
jQuery.expr[":"].caseInsensitiveStartsWith = typeof(jQuery.expr.createPseudo) == "function" ? jQuery.expr.createPseudo(function (a) {
    return function (b) {
        return jQuery(b).text().toLocaleLowerCase().indexOf(a.toLocaleLowerCase()) === 0;
    };
}) : function (c, b, a) {
    return jQuery(c).text().toLocaleLowerCase().indexOf(a[3].toLocaleLowerCase()) === 0;
};
if (!jQuery.Event.prototype.stop) {
    jQuery.Event.prototype.stop = function () {
        this.preventDefault();
        this.stopPropagation();
    };
}
$.ajaxSetup({error: function (a) {
    if (a.readyState !== 4) {
        return false;
    }
    if (a.getResponseHeader("X-App") === "login") {
        Login.openOrRedirect();
        return false;
    }
    if (a.status) {
        switch (a.status) {
            case 301:
            case 302:
            case 307:
            case 403:
            case 404:
            case 500:
            case 503:
                return false;
                break;
        }
    }
    return true;
}, statusCode: {403: function () {
    Login.openOrRedirect();
}}});
var Cookie = {cache: {}, create: function (d, e, b) {
    b = $.extend({}, b);
    b.expires = b.expires || 1;
    if (typeof b.expires === "number") {
        var a = b.expires;
        b.expires = new Date();
        b.expires.setTime(b.expires.getTime() + (a * 3600000));
    }
    var c = [encodeURIComponent(d) + "=", b.escape ? encodeURIComponent(e) : e, b.expires ? "; expires=" + b.expires.toUTCString() : "", b.path ? "; path=" + b.path : "", b.domain ? "; domain=" + b.domain : "", b.secure ? "; secure" : ""];
    document.cookie = c.join("");
    if (Cookie.cache) {
        if (b.expires.getTime() < (new Date()).getTime()) {
            delete Cookie.cache[d];
        } else {
            Cookie.cache[d] = e;
        }
    }
}, read: function (c) {
    if (Cookie.cache[c]) {
        return Cookie.cache[c];
    }
    var a = {};
    var d = document.cookie.split(";");
    if (d.length > 0) {
        for (var b = 0; b < d.length; b++) {
            var e = d[b].split("=");
            if (e.length >= 2) {
                a[$.trim(e[0])] = e[1];
            }
        }
    }
    Cookie.cache = a;
    return a[c] || null;
}, erase: function (b, a) {
    if (!a) {
        a = {expires: -1};
    } else {
        if (!a.expires) {
            a.expires = -1;
        }
    }
    Cookie.create(b, 0, a);
}, isSupported: function () {
    return(document.cookie.indexOf("=") !== -1);
}};
var Core = {baseUrl: "/", supportUrl: "/support/", browser: null, deferredLoadQueue: [], locale: "en-us", region: "us", shortDateFormat: "MM/dd/Y", dateTimeFormat: "dd/MM/yyyy HH:mm", project: "", staticUrl: "/", sharedStaticUrl: "/local-common/", host: "", userAgent: "web", initialize: function () {
    Core.processLoadQueue();
    Core.ui();
    Core.host = location.protocol + "//" + (location.host || location.hostname);
    var b = $("html"), a = Core.getBrowser();
    if (a.name !== "") {
        b.addClass(a.name).addClass(a.full);
        if (a.name === "ie" && (a.version === 6 || a.version === 7)) {
            b.addClass("ie67");
        }
    }
}, alpha: function (a) {
    return a.replace(/[^a-zA-Z]/gi, "");
}, appendFrame: function (b, d, a, c, e) {
    if (typeof b === "undefined") {
        return;
    }
    if (typeof d === "undefined") {
        d = 1;
    }
    if (typeof a === "undefined") {
        a = 1;
    }
    if (typeof c === "undefined") {
        c = $("body");
    }
    if (Core.isIE()) {
        c.append('<iframe src="' + b + '" width="' + d + '" height="' + a + '" scrolling="no" frameborder="0" allowTransparency="true"' + ((typeof e !== "undefined") ? ' id="' + e + '"' : "") + "></iframe>");
    } else {
        c.append('<object type="text/html" data="' + b + '" width="' + d + '" height="' + a + '"' + ((typeof e !== "undefined") ? ' id="' + e + '"' : "") + "></object>");
    }
}, fixTableHeaders: function (b, a) {
    $(b).each(function () {
        a = a || 18;
        var d = $(this);
        var c = a;
        d.find(".sort-link").each(function () {
            var e = $(this).height();
            if (e > c) {
                c = e;
            }
        });
        if (c > a) {
            d.find(".sort-link, .sort-tab").css("height", c);
        }
    });
}, formatLocale: function (c, a) {
    a = a || "-";
    c = c || 1;
    switch (c) {
        case 1:
        default:
            return Core.locale.replace("-", a);
            break;
        case 2:
            var b = Core.locale.split("-");
            return b[0] + a + b[1].toUpperCase();
            break;
        case 3:
            return Core.locale.toUpperCase().replace("-", a);
            break;
    }
}, formatDatetime: function (d, f) {
    var b;
    if (!f) {
        b = new Date();
    } else {
        b = new Date(f);
        if (isNaN(b.getTime())) {
            f = f.substring(0, 10) + " " + f.substring(11, 16) + ":00 GMT" + f.substring(16, 19) + f.substring(20, 22);
            b = new Date(f);
        }
        if (isNaN(b.getTime())) {
            f = f.substring(0, 4) + "/" + f.substring(5, 7) + "/" + f.substring(8, 29);
            b = new Date(f);
        }
        if (isNaN(b.getTime())) {
            f = f.substring(5, 10) + " " + f.substring(11, 16) + " GMT" + f.substring(23, 28) + " " + f.substring(0, 4);
            b = new Date(f);
        }
        if (isNaN(b.getTime())) {
            return false;
        }
    }
    if (!d) {
        d = "yyyy-MM-ddThh:mmZ";
    }
    var c = b.getHours(), a = "AM";
    if (c > 12) {
        c -= 12;
        a = "PM";
    } else {
        if (c === 12) {
            a = "PM";
        } else {
            if (c === 0) {
                c = 12;
            }
        }
    }
    var e = parseInt(b.getTimezoneOffset() / 60 * -1, 10);
    if (e < 0) {
        e = "-" + Core.zeroFill(Math.abs(e), 2) + ":00";
    } else {
        e = " + " + Core.zeroFill(Math.abs(e), 2) + ":00";
    }
    d = d.replace("yyyy", b.getFullYear());
    d = d.replace("MM", Core.zeroFill(b.getMonth() + 1, 2));
    d = d.replace("dd", Core.zeroFill(b.getDate(), 2));
    d = d.replace("HH", Core.zeroFill(b.getHours(), 2));
    d = d.replace("hh", Core.zeroFill(c, 2));
    d = d.replace("mm", Core.zeroFill(b.getMinutes(), 2));
    d = d.replace("a", a);
    d = d.replace("Z", e);
    return d;
}, getBrowser: function () {
    if (Core.browser) {
        return Core.browser;
    }
    var c = $.support, b = "", a = 0;
    if (!c.hrefNormalized && !c.tbody && !c.style && !c.opacity) {
        if (typeof document.body.style.maxHeight !== "undefined" || window.XMLHttpRequest) {
            b = "ie";
            a = 7;
        } else {
            b = "ie";
            a = 6;
        }
    } else {
        if (c.hrefNormalized && c.tbody && c.style && !c.opacity) {
            b = "ie";
            a = 8;
        } else {
            if (typeof $.browser !== "undefined") {
                if ($.browser.mozilla) {
                    b = "ff";
                } else {
                    if ($.browser.msie) {
                        b = "ie";
                    } else {
                        if ($.browser.webkit) {
                            if (navigator.userAgent.toLowerCase().indexOf("chrome") >= 0) {
                                b = "chrome";
                            } else {
                                b = "safari";
                            }
                        } else {
                            if ($.browser.opera) {
                                b = "opera";
                            }
                        }
                    }
                }
                a = parseInt($.browser.version, 10);
            }
        }
    }
    Core.browser = {name: b, full: b + a, version: a};
    return Core.browser;
}, getHash: function () {
    var a = location.hash || "";
    return a.substr(1, a.length);
}, getLanguage: function () {
    return Core.locale.split("-")[0];
}, getRegion: function () {
    return Core.locale.split("-")[1];
}, goTo: function (a, b) {
    window.location.href = (b ? Core.baseUrl : "") + a;
    if (window.event) {
        window.event.returnValue = false;
    }
}, include: function (b, c, a) {
    $.ajax({url: b, dataType: "script", success: c, cache: a !== false});
}, isCallback: function (a) {
    return(a && typeof a === "function");
}, isIE: function (a) {
    var b = Core.getBrowser();
    if (a) {
        return(a === b.version);
    }
    return(b.name === "ie");
}, load: function (b, a, c) {
    a = a !== false;
    if (Page.loaded || !a) {
        Core.loadDeferred(b, c);
    } else {
        Core.deferredLoadQueue.push(b);
    }
}, loadDeferred: function (b, e) {
    var d = b.indexOf("?");
    var c = b.lastIndexOf(".") + 1;
    var a = b.substring(c, d === -1 ? b.length : d);
    switch (a) {
        case"js":
            Core.loadDeferredScript(b, e);
            break;
        case"css":
            Core.loadDeferredStyle(b);
            break;
    }
}, loadDeferredScript: function (a, b) {
    $.ajax({url: a, cache: true, global: false, dataType: "script", success: b});
}, loadDeferredStyle: function (b, a) {
    $("head").append('<link rel="stylesheet" href="' + b + '" type="text/css" media="' + (a || "all") + '" />');
}, msg: function (c) {
    for (var b = 1, a = arguments.length; b < a; ++b) {
        c = c.replace("{" + (b - 1) + "}", arguments[b]);
    }
    return c;
}, msgAll: function (c) {
    for (var b = 1, a = arguments.length; b < a; ++b) {
        c = c.replace(new RegExp("\\{" + (b - 1) + "\\}", "g"), arguments[b]);
    }
    return c;
}, numeric: function (a) {
    a = a.replace(/[^0-9]/gi, "");
    if (!a || isNaN(a)) {
        a = 0;
    }
    return a;
}, open: function (a) {
    if (a.href) {
        window.open(a.href);
    }
    return false;
}, preventDefault: function (a) {
    a.preventDefault();
}, processLoadQueue: function () {
    if (Core.deferredLoadQueue.length > 0) {
        for (var a = 0, b; b = Core.deferredLoadQueue[a]; a++) {
            Core.load(b);
        }
    }
}, randomNumber: function (a) {
    return Math.floor(Math.random() * a);
}, scrollTo: function (f, e, g) {
    f = $(f);
    if (f.length !== 1) {
        return;
    }
    var d = $(window), a = d.scrollTop(), b = a + d.height(), c = f.offset().top;
    c -= 15;
    if (c >= a && c <= b) {
        return;
    }
    if (typeof $.browser !== "undefined") {
        $($.browser.webkit ? "body" : "html").animate({scrollTop: c}, e || 350, g || null);
    }
}, scrollToVisible: function (g, f, h) {
    g = $(g);
    if (g.length !== 1) {
        return;
    }
    var e = $(window), a = e.scrollTop(), c = a + e.height(), d = g.offset().top, b = d + g.height();
    d -= 15;
    b += 15;
    if (d >= a && b <= c) {
        return;
    }
    if (typeof $.browser !== "undefined") {
        $($.browser.webkit ? "body" : "html").animate({scrollTop: (d < a ? d : b - e.height())}, f || 350, h || null);
    }
}, stopEvent: function (a) {
    a.stop();
}, stopPropagation: function (a) {
    a.stopPropagation();
}, trimChar: function (a, b) {
    if (a.substr(0, 1) === b) {
        a = a.substr(1, (a.length - 1));
    }
    if (a.substr((a.length - 1), a.length) === b) {
        a = a.substr(0, (a.length - 1));
    }
    return a;
}, trimRight: function (a, b) {
    b = !b ? " \\s\u00A0" : (b + "").replace(/([\[\]\(\)\.\?\/\*\{\}\+\$\^\:])/g, "\\$1");
    return(a + "").replace(new RegExp("[" + b + "]+$", "g"), "");
}, ui: function (a) {
    a = a || document;
    if (Core.isIE(6)) {
        $(a).find("button.ui-button").hover(function () {
            if (!this.disabled || this.className.indexOf("disabled") == -1) {
                $(this).addClass("hover");
            }
        }, function () {
            $(this).removeClass("hover");
        });
    }
    if (Core.project !== "bam") {
        $(a).find("button.ui-button").click(function (d) {
            var b = $(this);
            var c = b.attr("data-text");
            if (typeof c === "undefined") {
                c = "";
            }
            if (this.tagName.toLowerCase() === "button" && c !== "") {
                if (b.attr("type") === "submit") {
                    d.preventDefault();
                    d.stopPropagation();
                    b.find("span span").html(c);
                    b.removeClass("hover").addClass("processing").attr("disabled", "disabled");
                    b.parents("form").submit();
                }
            }
            return true;
        });
    }
}, zeroFill: function (g, e, d) {
    if (typeof d === "undefined") {
        d = false;
    }
    var a = parseFloat(g), b = false, f = e - a.toString().length, c = f - 1;
    if (a < 0) {
        a = Math.abs(a);
        b = true;
        f++;
        c = f - 1;
    }
    if (e > 0) {
        if (a.toString().indexOf(".") > 0) {
            if (!d) {
                f += a.toString().split(".")[1].length;
            }
            f++;
            c = f - 1;
        }
        if (c >= 0) {
            do {
                a = "0" + a;
            } while (c--);
        }
    }
    if (b) {
        return"-" + a;
    }
    return a;
}, trackEvent: function (a, c, b) {
    window._gaq = _gaq || [];
    _gaq.push(["_trackEvent", a, c, b]);
}, bindTrackEvent: function (a, b, d, c) {
    $(a).on("click.analytics", function () {
        var e = $(this);
        b = e.data("category") || b || Core.project;
        d = e.data("action") || d || "Click";
        c = e.data("label") || c || Core.locale;
        Core.trackEvent(b, d, c);
    });
}, showUntilClosed: function (e, h, i) {
    i = i || {};
    var d = $(e), b = "bnet.closed." + h;
    if (!d.length || !Cookie.isSupported() || Cookie.read(b)) {
        return false;
    }
    var a = new Date();
    if (i.startDate) {
        var c = new Date(i.startDate);
        if ((c - a) > 0) {
            return false;
        }
    }
    if (i.endDate) {
        var f = new Date(i.endDate);
        if ((f - a) < 0) {
            return false;
        }
    }
    if (i.fadeIn) {
        d.fadeIn(i.fadeIn, i.onShow);
    } else {
        d.show();
        if (i.onShow) {
            i.onShow();
        }
    }
    var g = $.extend({path: Core.baseUrl, expires: 8760}, i.cookieParams || {});
    d.delegate("a", "click", function () {
        var k = $(this), l = k.data("label"), j = (this.rel === "close");
        if (j) {
            d.hide();
            if (i.onHide) {
                i.onHide();
            }
        }
        if (j || !i.closeButtonOnly) {
            Cookie.create(b, 1, g);
        }
        if (l) {
            Marketing.trackImpression(i.trackingCategory || "Tracking", i.trackingAction || "Click", l);
        }
    });
    return true;
}};
$(function () {
    Core.initialize();
});
var Feedback = {form: null, ID_MAP: {url: "feedback-page-url", email: "feedback-email", subject: "feedback-subject", body: "feedback-body"}, overlayInstance: null, pageErrorMsg: "", pageReferring: "", feedbackUrl: "", initialize: function () {
    if ($("#feedback-page").length) {
        return;
    }
    this.feedbackUrl = "/" + Core.locale + "/feedback/";
    var c = $(".feedback-suggestion-open"), b = $(".feedback-error-open"), a = this;
    c.each(function () {
        this.onclick = function () {
            a.open("suggestion");
            return false;
        };
    });
    b.each(function () {
        this.onclick = function () {
            a.open("bug");
            return false;
        };
    });
    this.overlayInstance = Overlay;
}, open: function (b) {
    var a = this;
    a.overlayInstance.open(a.feedbackUrl + "feedback-form.frag", {ajax: true, className: "feedback-overlay", bindClose: false});
    $("#overlay").unbind("overlayLoaded");
    $("#overlay").bind("overlayLoaded", function () {
        var f = $(a.overlayInstance.wrapper);
        a.overlayInstance.position();
        f.css("position", "absolute");
        if (parseInt(f.css("top"), 10) < 0) {
            f.css("top", 0);
        }
        a.form = document.getElementById("website-feedback");
        var l = $(".feedback-wrapper h2"), d = $("#feedback-intro-message"), h = document.getElementById("feedback-submit"), e = document.getElementById("feedback-subject"), n = document.getElementById("feedback-page-url"), k = document.getElementById("page-url-system"), g = $(".feedback-body-label #body-label-text"), j = document.getElementById("feedback-body"), c = document.getElementById("feedback-body-char-count"), m = $(c), i = j.getAttribute("maxlength");
        $(".overlay-close").unbind("click").bind("click", function (o) {
            o.preventDefault();
            a.cancel();
        });
        if (b === "suggestion") {
            l.html(Feedback.titleWebsiteSuggestion);
            d.html(Feedback.introFeedback);
        } else {
            l.html(Feedback.titleWebsiteFeedback);
            d.html(Feedback.introError);
            g.html(Feedback.feedbackError);
        }
        a.form.setAttribute("action", a.feedbackUrl + b);
        e.value = a.pageErrorMsg;
        n.value = a.pageReferring;
        k.value = a.pageReferring;
        $(n).focus();
        $("#blackout").bind("click.feedback", function (o) {
            $(n).focus();
        });
        $(n).keydown(function (o) {
            if (o.which === 9 && o.shiftKey) {
                o.preventDefault();
                $(cancelBtn).focus();
            }
        });
        h.onclick = function () {
            if (!a.submit()) {
                return false;
            }
        };
        c.parentNode.style.display = "block";
        c.firstChild.nodeValue = i;
        j.onkeyup = function () {
            if (this.value.length > i) {
                $(this).addClass(".feedback-error");
                m.addClass("error");
            } else {
                m.removeClass("error");
            }
            m.html(i - this.value.length);
        };
    });
}, submit: function () {
    var c = this.form.getAttribute("action"), j = document.getElementById("feedback-email"), a = document.getElementById("feedback-body-char-count"), g = document.getElementById("feedback-body"), b = $("#feedback-intro-message"), k = this;
    $(".feedback-error").each(function () {
        var i = $(this);
        i.removeClass("feedback-error");
        if (i.attr("id") !== "feedback-body-char-count") {
            i.next(".feedback-error-msg").hide();
        }
        $(a).removeClass("error");
    });
    if (g.value.length > (g.hasAttribute("maxlength") ? g.getAttribute("maxlength") : 2000)) {
        $(g).addClass("feedback-error");
        $(a).addClass("error");
    }
    var f = $(".feedback-required", this.form);
    f.each(function () {
        var i = $(this);
        if ((i.val() === null) || ($.trim(i.val()) === "")) {
            i.addClass("feedback-error");
            i.next(".feedback-error-msg").show();
        }
    });
    if ($(".feedback-error").length === 0) {
        var h = $(k.form).serializeArray();
        if ($.trim(j.value) === "") {
            for (var e = 0, d = h.length; e < d; e += 1) {
                if (h[e].name === "email") {
                    h[e].value = "no_email_given@blizzard.com";
                }
            }
        }
        $.ajax({type: "POST", url: c, data: h, success: function () {
            var i = document.getElementById("feedback-success"), l = document.getElementById("feedback-close");
            k.form.style.display = "none";
            i.style.display = "block";
            b.hide();
            l.onclick = function () {
                k.cancel();
            };
        }, error: function (m) {
            var i;
            try {
                i = JSON.parse(m.responseText);
                if (i) {
                    $.each(i.fieldErrors, function (p, q) {
                        $("#" + k.ID_MAP[p]).addClass("feedback-error").next(".feedback-error-msg").show();
                    });
                    return false;
                } else {
                    throw"Invalid response";
                }
            } catch (n) {
                var o = document.getElementById("feedback-fail"), l = document.getElementById("feedback-fail-close");
                k.form.style.display = "none";
                o.style.display = "block";
                l.onclick = function () {
                    k.cancel();
                };
                return false;
            }
        }});
        return false;
    } else {
    }
}, cancel: function () {
    $(".feedback-wrapper").remove();
    $("#blackout").unbind("click.feedback");
    this.overlayInstance.close();
    this.overlayInstance.cache = {};
    return false;
}};
var Filter = {query: {}, timers: {}, initialize: function (g) {
    var c = 0;
    if (location.hash) {
        var e = Core.getHash();
        if (e !== "reset") {
            var f = e.split("&"), d;
            for (var a = 0, b = f.length; a < b; ++a) {
                d = f[a].split("=");
                Filter.query[d[0]] = decodeURIComponent(d[1]) || "null";
                c++;
            }
        }
    }
    Filter.uiSetup(true);
    if (Core.isCallback(g)) {
        g(Filter.query, c);
    }
}, addParam: function (a, b) {
    if (a) {
        if (!b || b === "") {
            Filter.deleteParam(a);
        } else {
            Filter.query[a] = b;
        }
    }
}, appendRangeData: function (b, c) {
    var a = {};
    if (typeof b.data("min") !== "undefined") {
        a = {min: parseInt(c, 10), max: parseInt(b.siblings("input[data-max]").val(), 10), base: b.data("min"), type: "min"};
    } else {
        a = {min: parseInt(b.siblings("input[data-min]").val(), 10), max: parseInt(c, 10), base: b.data("max"), type: "max"};
    }
    return a;
}, applyQuery: function () {
    var b = [];
    if (Filter.query) {
        for (var a in Filter.query) {
            if (Filter.query[a] !== null && Filter.query.hasOwnProperty(a)) {
                b.push(a + "=" + encodeURIComponent(Filter.query[a]));
            }
        }
    }
    if (b.length > 0) {
        location.replace("#" + b.join("&"));
    } else {
        Filter.reset();
    }
}, bindInputs: function (a, b) {
    $(a).find("[data-filter]").each(function () {
        var c = $(this), d = Filter.extractData(c);
        if (d.field === "text" || d.field === "textarea") {
            c.keyup(function () {
                d.value = c.val();
                if (d.filter === "range") {
                    d.range = Filter.appendRangeData(c, d.value);
                }
                Filter.setTimer(d.name, d, b);
            });
        } else {
            if (d.field === "a") {
                c.click(function () {
                    d.value = c.data("value");
                    b(d);
                });
            } else {
                c.change(function () {
                    var e = (typeof c.data("value") !== "undefined") ? c.data("value") : "";
                    if (d.field === "checkbox") {
                        d.value = c.is(":checked") ? (e || "true") : "";
                    } else {
                        d.value = e || c.val();
                    }
                    b(d);
                });
            }
        }
    });
}, defaultApply: function (b, a) {
    if (a > 0) {
        $.each(b, function (d, e) {
            var c = $("#filter-" + d);
            if (!c.length) {
                return;
            }
            if (c.is(":checkbox") && e === "true") {
                c.prop("checked", true);
            } else {
                c.val(e);
            }
        });
    }
}, deleteParam: function (a) {
    Filter.query[a] = null;
}, extractData: function (a) {
    var b = $(a), c = b.prop("nodeName").toLowerCase();
    return{tag: c, node: b, name: (typeof b.data("name") !== "undefined") ? b.data("name") : b.attr("id").replace("filter-", ""), filter: b.data("filter"), column: b.data("column"), field: (c === "input") ? b.attr("type") : c, value: ""};
}, getParam: function (a) {
    return Filter.query[a] || null;
}, reset: function () {
    Filter.query = {};
    Filter.timers = {};
    location.replace("#reset");
}, resetInputs: function (a) {
    if (!a) {
        return;
    }
    $(a).find("input, select, textarea").each(function () {
        var b = $(this), c;
        if ((c = b.data("min")) !== "undefined") {
            b.val(c);
        } else {
            if ((c = b.data("max")) !== "undefined") {
                b.val(c);
            } else {
                if ((c = b.data("default")) !== "undefined") {
                    b.val(c);
                } else {
                    b.val("");
                }
            }
        }
        b.removeClass("active").removeAttr("checked");
        if (this.tagName.toLowerCase() === "input" && (this.type === "checkbox" || this.type === "radio")) {
            this.checked = false;
        }
    });
}, setTimer: function (a, b, c) {
    if (Filter.timers[a] !== null) {
        window.clearTimeout(Filter.timers[a]);
        Filter.timers[a] = null;
    }
    Filter.timers[a] = window.setTimeout(function () {
        c(b);
    }, 350);
}, applyReset: false, uiClick: function (d) {
    var b = $(d.currentTarget || d.target), a = b.siblings(".view"), c = b.siblings(".reset");
    if (b.val() !== "") {
        a.hide();
        c.show();
    } else {
        a.show();
        c.hide();
    }
}, uiReset: function (f) {
    var c = $(f.currentTarget || f.target), a = c.siblings(".view"), b = c.siblings(".input");
    a.show();
    c.hide();
    b.trigger("reset");
    if (Filter.applyReset) {
        var d = Filter.extractData(b);
        Filter.deleteParam(d.name);
        Filter.applyQuery();
    }
}, uiSetup: function (a) {
    var b = $(".ui-filter");
    if (b.length) {
        b.find(".reset").click(Filter.uiReset);
        b.find(".input").bind({keyup: Filter.uiClick, focus: Input.activate, blue: Input.reset, reset: function () {
            $(this).val("").trigger("keyup").trigger("blur");
        }});
    }
    Filter.applyReset = a;
}};
var Flash = {videoPlayer: "", videoBase: "", ratingImage: "", expressInstall: "expressInstall.swf", requiredVersion: "10.2.154", initialize: function () {
    Flash.defaultVideoFlashVars.ratingPath = Flash.ratingImage;
    Flash.defaultVideoFlashVars.locale = Core.locale;
    Flash.defaultVideoFlashVars.dateFormat = Core.shortDateFormat;
}, defaultVideoParams: {allowFullScreen: "true", bgcolor: "#000000", allowScriptAccess: "always", wmode: "opaque", menu: "false"}, defaultVideoFlashVars: {ratingFadeTime: "1", ratingShowTime: "4", autoPlay: true}, getFlashError: function () {
    var a = $('<div id="flash-error" class="align-center" />');
    a.append('<h3 class="subheader">' + Msg.ui.flashErrorHeader + '</h3><p><a href="' + Msg.ui.flashErrorUrl + '">' + Msg.ui.flashErrorText + "</a></p>");
    return a;
}};
$(function () {
    Flash.initialize();
});
var Hash = {base: "aZbYcXdWeVfUgThSiRjQkPlOmNnMoLpKqJrIsHtGuFvEwDxCyBzA0123456789+/", delimiter: "!", empty: ".", batch: function (d) {
    var b = [];
    for (var c = 0, a = d.length; c < a; c++) {
        b.push(Hash.encode(d[c]));
    }
    return Core.trimRight(b.join(Hash.delimiter), Hash.delimiter);
}, encode: function (f, e) {
    var g = "", d = Hash.base, c = Hash.empty;
    for (var b = 0, a = f.length; b < a; b++) {
        if (f[b] !== null) {
            g += d.charAt(f[b]);
        } else {
            if (e) {
                g += c;
            }
        }
    }
    return Core.trimRight(g, c);
}, decode: function (f) {
    var g = [], e = Hash.base, d = Hash.empty;
    for (var c = 0, a = f.length, b; c < a; c++) {
        b = f.charAt(c);
        b = (b === d) ? null : e.indexOf(b);
        g.push(b);
    }
    return g;
}};
var History = {enabled: (window.history.pushState), hashbangs: {}, log: [], hashChangeCallback: null, popStateCallback: null, initialize: function () {
    window.onhashchange = History.onHashChange;
    window.onpopstate = History.onPopState;
}, lookup: function (a) {
    return History.log[a] || History.log;
}, flush: function () {
    History.log = [];
}, isHashbang: function () {
    return(Core.getHash().charAt(0) === "!");
}, push: function (b, a) {
    b = History.packageState(b);
    History.log.push([b, a]);
    if (History.enabled) {
        window.history.pushState(b, document.title, a);
    } else {
        History.updateHash(b, a);
    }
}, replace: function (b, a) {
    b = History.packageState(b, true);
    History.log[History.log.length - 1] = [b, a];
    if (History.enabled) {
        window.history.replaceState(b, document.title, a);
    } else {
        History.updateHash(b, a);
    }
}, updateHash: function (b, a) {
    if (a.indexOf("#") !== -1) {
        a = a.split("#")[0];
    }
    if (a.charAt(0) !== "/") {
        a = "/" + a;
    }
    a = "!" + a.replace("?", "");
    location.hash = a;
    History.hashbangs[a] = b;
}, packageState: function (a, b) {
    if (b) {
        a.logIndex = History.log.length;
    } else {
        a.logIndex = History.log.length + 1;
    }
    a.replacedState = (b === true);
    a.pageTitle = document.title;
    a.currentHash = location.hash;
    a.absoluteUrl = location.href;
    a.isHashbang = !History.enabled;
    return a;
}, onHashChange: function (b) {
    if (Core.isCallback(History.hashChangeCallback)) {
        var a = History.hashbangs[Core.getHash()] || null;
        History.hashChangeCallback(b, a);
    }
}, onPopState: function (a) {
    if (Core.isCallback(History.popStateCallback)) {
        History.popStateCallback(a);
    }
}};
$(function () {
    History.initialize();
});
var KeyCode = {backspace: 8, enter: 13, esc: 27, space: 32, tab: 9, arrowLeft: 37, arrowUp: 38, arrowRight: 39, arrowDown: 40, map: {global: {numbers: [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], letters: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], controls: [8, 9, 13, 16, 17, 18, 20, 27, 33, 32, 34, 35, 36, 45, 46, 144], functions: [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123], arrows: [37, 38, 39, 40], os: [17, 91, 92, 93, 219, 224]}, de: {letters: [59, 192, 219, 222]}, es: {letters: [59, 192]}, ru: {letters: [59, 188, 190, 192, 219, 221, 222]}, fr: {letters: [191]}}, arrows: function (a) {
    return KeyCode.get("arrows", a);
}, controls: function (a) {
    return KeyCode.get("controls", a);
}, functions: function (a) {
    return KeyCode.get("functions", a);
}, get: function (e, g) {
    g = g || Core.getLanguage();
    var f = [], d = [];
    if (typeof e === "string") {
        d = [e];
    } else {
        d = e;
    }
    for (var c = 0, a = d.length; c < a; ++c) {
        var b = d[c];
        if (!KeyCode.map.global[b]) {
            continue;
        }
        f = f.concat(KeyCode.map.global[b]);
        if (KeyCode.map[g] && KeyCode.map[g][b]) {
            f = f.concat(KeyCode.map[g][b]);
        }
    }
    return f;
}, isAlpha: function (a, b) {
    return($.inArray(a.which, KeyCode.get(["letters", "controls"], b)) >= 0);
}, isAlnum: function (a, b) {
    return(KeyCode.isAlpha(a, b) || KeyCode.isNumeric(a, b));
}, isNumeric: function (a, b) {
    return($.inArray(a.which, KeyCode.get(["numbers", "controls"], b)) >= 0) && !a.shiftKey;
}, letters: function (a) {
    return KeyCode.get("letters", a);
}, numbers: function (a) {
    return KeyCode.get("numbers", a);
}};
var Locale = {dataPath: "data/i18n.frag", initialize: function () {
    var a = location.pathname.replace(Core.baseUrl, "");
    a = a + (location.search || "?");
    $("#change-language, #service .service-language a").click(function () {
        return Locale.openMenu("#change-language", encodeURIComponent(a));
    });
}, openMenu: function (b, c) {
    var a = $("#international");
    b = $(b);
    c = c || "";
    if (a.is(":visible")) {
        a.slideUp();
        b.toggleClass("open");
    } else {
        if (a.html() !== "") {
            Locale.display();
            b.toggleClass("open");
        } else {
            $.ajax({url: Core.baseUrl + "/" + Locale.dataPath + "?path=" + c, dataType: "html", success: function (d) {
                if (d) {
                    a.replaceWith(d);
                    b.toggleClass("open");
                    Locale.display();
                }
            }});
        }
    }
    return false;
}, trackEvent: function (b, a) {
    try {
        _gaq.push(["_trackEvent", "Battle.net Language Change Event", b, a]);
    } catch (c) {
    }
}, display: function () {
    var a = $("#international");
    a.slideDown("fast", function () {
        $(this).css("display", "block");
    });
    if (typeof $.browser === "undefined" || !$.browser.opera) {
        $("html, body").animate({scrollTop: a.offset().top}, 1000);
    }
}};
$(function () {
    Locale.initialize();
});
var Login = {CONTAINER_ID: "login-embedded", FADE_DURATION: "slow", embeddedUrl: "/login/login.frag", success: function (a) {
    $("<div/>", {id: "embedded-loader"}).appendTo("body");
    window.setTimeout(function () {
        var c = window.location.search ? "&" : "?";
        if (window.location.hash.length === 0) {
            window.location = window.location + c + "ST=" + a;
        } else {
            var b = window.location.href.substring(0, window.location.href.length - window.location.hash.length);
            window.location = b + c + "ST=" + a + "&ST-frag=" + window.location.hash.substring(1);
        }
    }, 100);
}, open: function (c, b, d) {
    c = c || Login.embeddedUrl;
    Login._timeTracker.start();
    if ("https:" === document.location.protocol) {
        c += (c.indexOf("?") === -1) ? "?" : "&";
        c += "secureOrigin=true";
    }
    if (document.getElementById(Login.CONTAINER_ID)) {
        return false;
    }
    if ((typeof postMessage !== "object" && typeof postMessage !== "function") || typeof JSON !== "object") {
        if (b) {
            var e = (d.indexOf("?") === -1) ? "?" : "&";
            document.location = b + encodeURIComponent(d + e + "ST-frag=" + encodeURIComponent(Core.getHash()));
            return false;
        }
        return true;
    }
    var a = $("<div/>", {id: Login.CONTAINER_ID});
    a.append($("<iframe/>", {src: c, frameborder: 0}));
    if (Core.isIE()) {
        $(window).resize(function () {
            var f = $(document);
            $("#blackout").css({width: f.width(), height: f.height()});
        });
    }
    a.appendTo("body").show();
    Blackout.show(null, function () {
        Blackout.hide();
        Login._close();
    });
    Login._setListener();
    return false;
}, openOrRedirect: function (c, b, d) {
    if (Login.open(c, b, d)) {
        var a = location.href, e = (a.indexOf("?") === -1) ? "?" : "&";
        location.href = a + e + "login=true&cr=true";
    }
}, _close: function (a) {
    Login._removeListener();
    a = a || false;
    $("#" + Login.CONTAINER_ID).fadeOut(Login.FADE_DURATION, function () {
        $(this).remove();
        if (a) {
            Blackout.hide();
        }
    });
}, _messageListener: function (b) {
    var c = JSON.parse(b.data);
    switch (c.action) {
        case"onload":
            Login._timeTracker.end();
            var a = $("#" + Login.CONTAINER_ID), d = $("#" + Login.CONTAINER_ID + " iframe");
            a.css("height", c.height);
            d.css("height", c.height);
            if (c.height > 500) {
                a.css("margin-top", -(c.height / 2));
                a.css("margin-bottom", -(c.height / 2));
            }
            break;
        case"success":
            Login._close();
            Login.success(c.loginTicket);
            break;
        case"close":
            Login._close(true);
            break;
        case"redirect":
            window.location = c.url + "?ref=" + encodeURIComponent(window.location);
            break;
    }
}, _setListener: function () {
    Login._removeListener();
    Login._listener = function (a) {
        Login._messageListener(a);
    };
    if (typeof addEventListener !== "undefined") {
        addEventListener("message", Login._listener, false);
    } else {
        attachEvent("onmessage", Login._listener);
    }
}, _removeListener: function () {
    if (!Login._listener) {
        return;
    }
    if (typeof removeEventListener !== "undefined") {
        removeEventListener("message", Login._listener, false);
    } else {
        detachEvent("onmessage", Login._listener);
    }
}, _timeTracker: {startTime: null, start: function () {
    this.startTime = new Date().getTime();
}, end: function () {
    _gaq.push(["_trackEvent", "debug", "login frag load time", "" + Math.round(((new Date().getTime()) - this.startTime) / 500) * 500]);
}}};
var Marketing = {bindTracking: function (c, a, b) {
    $(c).click(function () {
        var d = $(this);
        try {
            _gaq.push(["_trackEvent", d.data("category") || a, d.data("action") || b, d.data("ad") + " [" + Core.locale + "]"]);
        } catch (f) {
        }
    });
}, trackActivity: function (b, a) {
    try {
        _gaq.push(["_trackEvent", "Battle.net User Activity", b, a + " [" + Core.locale + "]"]);
    } catch (c) {
    }
}, trackAd: function (f, d, b, a) {
    try {
        b = b ? b + " - " : "";
        _gaq.push(["_trackEvent", "Battle.net Ad Service", (a) ? "Ad Click-Throughs" : "Ad Impressions", "Ad " + encodeURIComponent(d.replace(" ", "_")) + " - " + b + Core.locale + " - " + f]);
    } catch (c) {
    }
}, trackImpression: function (b, c, a) {
    try {
        _gaq.push(["_trackEvent", b, c, a + " [" + Core.locale + "]"]);
    } catch (d) {
    }
}};
var Overlay = {cache: {}, config: {ajax: false, bindClose: true, className: "", fadeSpeed: 250, blackout: true}, loaded: null, wrapper: null, initialize: function () {
    if (Overlay.loaded && Overlay.wrapper) {
        return;
    }
    Overlay.wrapper = $("<div/>", {id: "overlay", "class": "ui-overlay"}).appendTo("body").hide();
    $("<a/>").addClass("overlay-close").attr("href", "javascript:;").click(Overlay.close).appendTo(Overlay.wrapper);
    var b = $("<div/>").addClass("overlay-top").appendTo(Overlay.wrapper);
    var c = $("<div/>").addClass("overlay-bottom").appendTo(b);
    var a = $("<div/>").addClass("overlay-middle").appendTo(c);
    Overlay.loaded = true;
}, close: function (a) {
    a = !a ? 10 : (a || 250);
    $("#blackout").fadeOut(a);
    Overlay.wrapper.fadeOut(a, function () {
        Overlay.setContent("");
        Overlay.wrapper.attr("class", "ui-overlay");
        if (Overlay.wrapper.attr("id") !== "overlay") {
            Overlay.wrapper.hide();
        }
    });
}, open: function (b, a) {
    Overlay.initialize();
    a = $.extend({}, Overlay.config, a);
    if (a.className) {
        Overlay.wrapper.addClass(a.className);
    }
    if (a.blackout) {
        if (a.bindClose) {
            Blackout.show(null, function () {
                Overlay.close(a.fadeSpeed);
            });
        } else {
            Blackout.show();
        }
    }
    if (a.ajax) {
        if (Overlay.cache[b]) {
            Overlay.show(Overlay.cache[b]);
            $("#overlay").trigger("overlayLoaded");
        } else {
            $.ajax({type: "GET", url: b, dataType: "html", beforeSend: function () {
                Overlay.reset();
                Overlay.show();
            }, success: function (d, c) {
                Overlay.cache[b] = d;
                Overlay.setContent(d);
                $("#overlay").trigger("overlayLoaded");
            }});
        }
    } else {
        if (b.substr(0, 1) === "#") {
            Overlay.show($(b).html());
        } else {
            Overlay.show(b);
        }
    }
}, openCustom: function (b, a) {
    Overlay.wrapper = $(b);
    if (Overlay.wrapper) {
        a = $.extend({}, Overlay.config, a);
        if (a.blackout) {
            if (a.bindClose) {
                Blackout.show(null, function () {
                    Overlay.close(a.fadeSpeed);
                });
            } else {
                Blackout.show();
            }
        }
        Overlay.position();
    }
}, position: function (d) {
    d = d || Overlay.wrapper;
    var c = d.outerWidth(false), b = d.outerHeight(false), a = (Page.dimensions.width / 2) - (c / 2), e = (Page.dimensions.height / 2) - (b / 2);
    if (Core.isIE(6)) {
        e = Page.scroll.top + e;
    }
    d.show().css({left: a + "px", top: e + "px", position: Core.isIE(6) ? "absolute" : "fixed"});
}, reset: function () {
    Overlay.wrapper.find(".overlay-middle").html("").addClass("overlay-loading");
}, show: function (a) {
    Overlay.setContent(a);
    Overlay.position();
}, setContent: function (a) {
    if (a != null) {
        if (a === "") {
            Overlay.wrapper.find("overlay-middle").empty();
        } else {
            Overlay.wrapper.find(".overlay-middle").html(a);
        }
    }
}};
var Page = {object: null, loaded: false, dimensions: {width: 0, height: 0}, scroll: {top: 0, width: 0}, initialize: function () {
    if (Page.loaded) {
        return;
    }
    if (!Page.object) {
        Page.object = $(window);
    }
    Page.object.resize(Page.getDimensions).scroll(Page.getScrollValues);
    Page.getScrollValues();
    Page.getDimensions();
    Page.loaded = true;
}, getScrollValues: function () {
    Page.scroll.top = Page.object.scrollTop();
    Page.scroll.left = Page.object.scrollLeft();
}, getDimensions: function () {
    Page.dimensions.width = Page.object.width();
    Page.dimensions.height = Page.object.height();
}};
$(function () {
    Page.initialize();
});
var Tickets = {tag: null, summary: null, fragment: null, ul: null, doc: null, total: 3, initialize: function () {
    Tickets.doc = document;
    var a = Tickets.doc;
    Tickets.tag = a.getElementById("support-ticket-count");
    Tickets.summary = a.getElementById("ticket-summary");
    Tickets.fragment = a.createDocumentFragment();
    Tickets.ul = a.createElement("ul");
    Tickets.loadStatus();
}, updateSummary: function (b) {
    var d = Tickets.doc;
    Tickets.fragment = d.createDocumentFragment();
    Tickets.ul = d.createElement("ul");
    Tickets.summary.innerHTML = "";
    Tickets.fragment.appendChild(Tickets.ul);
    if (b.length < 1) {
        return;
    }
    for (var a = 0, c; c = b[a]; a++) {
        Tickets.createListItem(c, a);
    }
    Tickets.summary.appendChild(Tickets.fragment);
}, createListItem: function (j, g) {
    if (typeof j !== "object") {
        return;
    }
    var n = Tickets.doc, e = Core.isIE(6) || Core.isIE(7) ? "className" : "class", c = Msg.support, b = {created: c.ticketNew, status: c.ticketStatus, viewAll: c.ticketAll, OPEN: c.ticketOpen, ANSWERED: c.ticketAnswered, RESOLVED: c.ticketResolved, CANCELED: c.ticketCanceled, ARCHIVED: c.ticketArchived, INFO: c.ticketInfo}, f = "", d = "", p = "", k = null, o = null, l = null, m = null, q = null, i = null, h = -1;
    if (j.status === "OPEN") {
        f = b.created.replace("{0}", Core.region.toUpperCase() + j.caseId);
    } else {
        f = b.status.replace("{0}", Core.region.toUpperCase() + j.caseId);
    }
    i = n.createElement("span");
    i.setAttribute(e, "ticket-datetime");
    i.appendChild(n.createTextNode(Tickets.localizeDatetime(j.lastUpdate)));
    l = n.createElement("a");
    l.href = Core.secureSupportUrl + "ticket/thread/" + j.caseId;
    k = n.createElement("span"), k.setAttribute(e, "icon-ticket-status");
    l.appendChild(k);
    h = f.indexOf("{1}");
    if (h > 0) {
        d = f.substring(0, h);
        p = f.substr(h + 3, f.length);
        m = n.createElement("span");
        m.setAttribute(e, "ticket-" + j.status.toLowerCase());
        m.appendChild(n.createTextNode(b[j.status]));
        l.appendChild(n.createTextNode(d));
        l.appendChild(m);
        l.appendChild(n.createTextNode(p));
    } else {
        l.appendChild(n.createTextNode(f));
    }
    q = n.createElement("br");
    l.appendChild(q);
    l.appendChild(i);
    o = n.createElement("li");
    if (g === 0) {
        o.setAttribute(e, "first-ticket");
    }
    o.appendChild(l);
    Tickets.ul.appendChild(o);
    if (g === this.total) {
        o = n.createElement("li");
        o.setAttribute(e, "view-all-tickets");
        l = n.createElement("a");
        l.href = Core.secureSupportUrl + "ticket/status";
        l.appendChild(n.createTextNode(b.viewAll));
        o.appendChild(l);
        Tickets.ul.appendChild(o);
    }
}, updateTotal: function (b) {
    b = (typeof b === "number") ? b : 0;
    var a = (Core.isIE(6) || Core.isIE(7)) ? "className" : "class";
    if (b > 0) {
        Tickets.tag.setAttribute(a, "open-support-tickets");
        Tickets.tag.innerHTML = b;
    } else {
        Tickets.tag.setAttribute(a, "no-support-tickets");
        Tickets.tag.innerHTML = "";
    }
}, localizeDatetime: function (b) {
    var c = Core.dateTimeFormat, a = Core.locale, d = null;
    d = Core.formatDatetime(c, b);
    if (!d) {
        return"";
    }
    if (a === "en-us" || a === "es-mx" || a === "zh-cn" || a === "zh-tw") {
        d = d.replace("/0", "/");
        if (d.substr(0, 1) === "0") {
            d = d.substr(1);
        }
    }
    if (a === "en-us" || a === "es-mx") {
        d = d.replace(" 0", " ");
    }
    return d;
}, loadStatus: function () {
    if (Tickets.summary !== null) {
        $.ajax({timeout: 3000, url: Core.secureSupportUrl + "update/json", ifModified: true, global: false, dataType: "jsonp", jsonpCallback: "getStatus", data: {supportToken: supportToken}, success: function (b, a) {
            if ("notmodified" !== a) {
                Tickets.updateTotal(b.total);
                Tickets.updateSummary(b.details, b.total);
            }
        }});
    }
}};
$(function () {
    Tickets.initialize();
});
var Toggle = {cache: {}, callback: null, timeout: 800, keepOpen: false, open: function (e, d, f, b) {
    if (b) {
        Toggle.timeout = b;
    }
    Toggle.keepOpen = true;
    var c = Toggle.key(f);
    for (var a in Toggle.cache) {
        if (a !== c) {
            Toggle.close(Toggle.cache[a].trigger, Toggle.cache[a].activeClass, Toggle.cache[a].target, 0, true);
        }
    }
    if (!Toggle.cache[c]) {
        $(e).mouseleave(function () {
            Toggle.keepOpen = false;
            Toggle.close(e, d, f, Toggle.timeout);
        }).mouseenter(function () {
            Toggle.keepOpen = true;
            window.clearTimeout(Toggle.cache[c].timer);
        });
        $(f).mouseleave(function () {
            Toggle.keepOpen = false;
            Toggle.close(e, d, f, Toggle.timeout);
        }).mouseenter(function () {
            Toggle.keepOpen = true;
            window.clearTimeout(Toggle.cache[c].timer);
        });
        Toggle.cache[c] = {trigger: e, target: f, activeClass: d, key: c, timer: null};
    }
    $(e).toggleClass(d);
    $(f).toggle();
    window.clearTimeout(Toggle.cache[c].timer);
}, close: function (d, c, f, a, e) {
    e = (typeof e === "boolean") ? e : false;
    var b = Toggle.key(f);
    window.clearTimeout(Toggle.cache[b].timer);
    Toggle.cache[b].timer = setTimeout(function () {
        if (Toggle.keepOpen && !e) {
            return;
        }
        $(f).hide();
        $(d).removeClass(c);
        Toggle.triggerCallback();
    }, a);
}, key: function (a) {
    return(typeof a === "string") ? a : "#" + $(a).attr("id");
}, triggerCallback: function () {
    if (Core.isCallback(Toggle.callback)) {
        Toggle.callback();
    }
}};